generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Outfit {
  id               Int              @id @default(autoincrement())
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @default(now()) @updatedAt
  description      String
  content          String?
  kibbeTypes       String[]
  images           String[]
  imagesOptimized  String[]
  imagesThumbnails String[]
  occasions        String[]
  aesthetic        String
  seasonalColors   String[]
  purchaseLink     String?
  postReason       String?
  published        Boolean          @default(false)
  owner            User             @relation(fields: [ownerId], references: [uid])
  ownerId          String
  FlaggedContent   FlaggedContent[]
  upvotes          Int              @default(0)
  downvotes        Int              @default(0)
  Comment          Comment[]
  postVote         PostVote[]
}

model Comment {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  content   String
  owner     User     @relation(fields: [ownerId], references: [uid])
  ownerId   String
  outfit    Outfit   @relation(fields: [outfitId], references: [id])
  outfitId  Int
}

model User {
  uid                  String             @id @unique @db.VarChar
  email                String             @unique
  firstName            String?
  lastName             String?
  sellerName           String?            @unique
  userImage            String?
  description          String?
  modusType            String?
  seasonalColor        String?
  outfits              Outfit[]
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @default(now()) @updatedAt
  customerId           String?
  paymentMethodId      String?
  paymentExpYear       Int?
  paymentExpMonth      Int?
  paymentLast4         String?
  Blocker              Block[]            @relation(name: "blocker")
  Blocked              Block[]            @relation(name: "blocked")
  FlaggedContent       FlaggedContent[]
  userType             UserType           @default(MEMBER)
  Comment              Comment[]
  hasSeenModusType     Boolean            @default(false)
  hasSeenIntroQuiz     Boolean            @default(false)
  hasSeenFeedbackAlert Boolean            @default(false)
  introQuizAnswers     Json               @default("{}")
  postVote             PostVote[]
  MobilePrediction     MobilePrediction[]
  MobileTraining       MobileTraining[]
}

model Block {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  blockerId String
  blocker   User     @relation(name: "blocker", fields: [blockerId], references: [uid])
  blockedId String
  blocked   User     @relation(name: "blocked", fields: [blockedId], references: [uid])
}

model FlaggedContent {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  listingId Int
  outfit    Outfit   @relation(fields: [listingId], references: [id])
  uid       String
  user      User     @relation(fields: [uid], references: [uid])
  reason    String
}

enum UserType {
  EXPERT
  MEMBER
}

model PostVote {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  uid       String
  user      User     @relation(fields: [uid], references: [uid])
  outfitId  Int
  outfit    Outfit   @relation(fields: [outfitId], references: [id])
  vote      Int

  @@unique([uid, outfitId])
}

model Training {
  id              Int          @id @default(autoincrement())
  uid             String       @unique
  replicateId     String?
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  user            WebsiteUser  @relation(fields: [userId], references: [id])
  userId          Int
  version         String?      @unique
  name            String?
  images          String[]     @default([])
  imageZip        String?
  purchased       Boolean      @default(false)
  Prediction      Prediction[]
  deleted         Boolean      @default(false)
  subjectFeatures String?
  subjectDetails  String[]     @default([])
}

model WebsiteUser {
  id                Int          @id @default(autoincrement())
  email             String       @unique
  name              String?
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  Training          Training[]
  Prediction        Prediction[]
  currentTrainingId Int?
}

model Prediction {
  id          Int               @id @default(autoincrement())
  replicateId String
  prompt      String?
  images      PredictionImage[]
  user        WebsiteUser       @relation(fields: [userId], references: [id])
  userId      Int
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @default(now()) @updatedAt
  trainingId  Int
  Training    Training          @relation(fields: [trainingId], references: [id])
}

model PredictionImage {
  id           Int        @id @default(autoincrement())
  predictionId Int
  imageUrl     String
  prediction   Prediction @relation(fields: [predictionId], references: [id])
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @default(now()) @updatedAt
  isSaved      Boolean    @default(false)
}

model MidjourneyPhoto {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  imageUrl  String
}

model MobilePrediction {
  id             Int                     @id @default(autoincrement())
  replicateId    String?                 @unique
  prompt         String
  theme          String?
  images         MobilePredictionImage[]
  owner          User                    @relation(fields: [ownerId], references: [uid])
  ownerId        String
  createdAt      DateTime                @default(now())
  updatedAt      DateTime                @default(now()) @updatedAt
  MobileTraining MobileTraining[]
}

model MobilePredictionImage {
  id           Int              @id @default(autoincrement())
  predictionId Int
  imageUrl     String
  prediction   MobilePrediction @relation(fields: [predictionId], references: [id])
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @default(now()) @updatedAt
  isSaved      Boolean          @default(false)
}

model MobileTraining {
  id              Int              @id @default(autoincrement())
  replicateId     String?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  version         String?          @unique
  name            String?
  images          String[]         @default([])
  imageZip        String?
  purchased       Boolean          @default(false)
  deleted         Boolean          @default(false)
  subjectFeatures String?
  subjectDetails  String[]         @default([])
  prediction      MobilePrediction @relation(fields: [predictionId], references: [id])
  owner           User             @relation(fields: [ownerId], references: [uid])
  ownerId         String
  predictionId    Int
}
